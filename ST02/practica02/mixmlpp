#!/usr/bin/python -tt
# -*- coding: utf-8 -*-

import sys , os , shutil
import argparse
import xmlpp

TAB = 8

def openFile (fileName , mode) :
    try :
        fich = open(fileName , mode)
        return fich
    except IOError :
        sys.stderr.write("Error open file " + fileName + " mode : " + mode.upper())
        raise SystemExit


def isemptyargs (arguments) :
    return arguments.input == None and not arguments.modify and arguments.output == None


def cntrlArgs (arguments) :
    dataFile = ""

    if arguments.modify and arguments.output != None :
        sys.stderr.write("Error -m and OUTPUT option are incompatibles" + '\n')
        raise SystemExit

    if not isemptyargs(arguments):

        fileR = openFile(arguments.input , "r")
        dataFile = fileR.read()
        fileR.close()

        if not arguments.modify and arguments.output == None:
            xmlpp.pprint(dataFile , sys.stdout , TAB , 80)

        if not arguments.modify and arguments.output != None:
            fileW = openFile(arguments.output , "w")
            xmlpp.pprint(dataFile , fileW , TAB , 80)
            fileW.close()


        if arguments.modify and arguments.output == None:
            fileW = openFile("/tmp/a" , "w")
            xmlpp.pprint(dataFile , fileW , TAB , 80)
            fileW.close()
            shutil.move("/tmp/a" , arguments.input)

    else :

        for linea in sys.stdin.readlines():
            dataFile += linea
        xmlpp.pprint(dataFile , sys.stdout , TAB , 80)


def main () :

    usage = "%prog [OPCIONES] input output if not arguments we read stdin"
    parser = argparse.ArgumentParser(usage)

    parser.add_argument("-i" , "--input"  , action="store" ,     dest="input"  , help = "xml file to format")
    parser.add_argument("-o" , "--output" , action="store" ,     dest="output" , help = "xml output file format")
    parser.add_argument("-m" , "--modify" , action="store_true", dest="modify" , help="modify this file in format XML")

    arguments = parser.parse_args()

    cntrlArgs(arguments)

if __name__ == "__main__" :
    main()
